import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, date
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.units import inch
from io import BytesIO
import tempfile
import hashlib
import os
import plotly.express as px
import plotly.graph_objects as go
import json

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Protocolo de Documentos",
    page_icon="üìã",
    layout="wide"
)

# Classe para gerenciar logs do sistema
class LogManager:
    def __init__(self, db_manager):
        self.db = db_manager
    
    def registrar_log(self, usuario_id, acao, tabela_afetada, registro_id=None, 
                     detalhes=None, status='sucesso', ip_address=None, user_agent=None):
        """Registra uma a√ß√£o no log do sistema"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        # Converter detalhes para JSON se for um dicion√°rio
        if isinstance(detalhes, dict):
            detalhes = json.dumps(detalhes, ensure_ascii=False)
        
        cursor.execute('''
            INSERT INTO logs_usuario (usuario_id, acao, tabela_afetada, registro_id,
                                    detalhes, ip_address, user_agent, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (usuario_id, acao, tabela_afetada, registro_id, detalhes, 
              ip_address, user_agent, status))
        conn.commit()
        conn.close()
    
    def buscar_logs(self, filtro_usuario=None, filtro_tabela=None, filtro_acao=None,
                   data_inicio=None, data_fim=None, limite=100):
        """Busca logs do sistema com filtros"""
        conn = self.db.get_connection()
        
        query = '''
            SELECT l.*, u.nome as usuario_nome
            FROM logs_usuario l
            LEFT JOIN usuarios u ON l.usuario_id = u.id
            WHERE 1=1
        '''
        params = []
        
        if filtro_usuario:
            query += " AND l.usuario_id = ?"
            params.append(filtro_usuario)
        
        if filtro_tabela:
            query += " AND l.tabela_afetada = ?"
            params.append(filtro_tabela)
        
        if filtro_acao:
            query += " AND l.acao = ?"
            params.append(filtro_acao)
        
        if data_inicio:
            query += " AND DATE(l.timestamp) >= ?"
            params.append(data_inicio)
        
        if data_fim:
            query += " AND DATE(l.timestamp) <= ?"
            params.append(data_fim)
        
        query += f" ORDER BY l.timestamp DESC LIMIT {limite}"
        
        df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        return df
    
    def estatisticas_logs(self):
        """Retorna estat√≠sticas dos logs"""
        conn = self.db.get_connection()
        
        # Total de a√ß√µes por tipo
        df_acoes = pd.read_sql_query('''
            SELECT acao, COUNT(*) as total
            FROM logs_usuario
            GROUP BY acao
            ORDER BY total DESC
        ''', conn)
        
        # A√ß√µes por usu√°rio
        df_usuarios = pd.read_sql_query('''
            SELECT u.nome, COUNT(*) as total_acoes
            FROM logs_usuario l
            LEFT JOIN usuarios u ON l.usuario_id = u.id
            GROUP BY l.usuario_id, u.nome
            ORDER BY total_acoes DESC
        ''', conn)
        
        # A√ß√µes por dia (√∫ltimos 30 dias)
        df_diario = pd.read_sql_query('''
            SELECT DATE(timestamp) as data, COUNT(*) as total
            FROM logs_usuario
            WHERE timestamp >= datetime('now', '-30 days')
            GROUP BY DATE(timestamp)
            ORDER BY data
        ''', conn)
        
        conn.close()
        return df_acoes, df_usuarios, df_diario

# Classe para gerenciar o banco de dados
class DatabaseManager:
    def __init__(self, db_name="protocolo_documentos.db"):
        self.db_name = db_name
        self.init_database()
    
    def get_connection(self):
        return sqlite3.connect(self.db_name)
    
    def init_database(self):
        """Cria as tabelas se n√£o existirem"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # Tabela de Usu√°rios
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS usuarios (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario TEXT UNIQUE NOT NULL,
                senha TEXT NOT NULL,
                nome TEXT NOT NULL,
                email TEXT,
                nivel_acesso TEXT DEFAULT 'usuario',
                ativo BOOLEAN DEFAULT 1,
                data_cadastro DATETIME DEFAULT CURRENT_TIMESTAMP,
                ultimo_login DATETIME
            )
        ''')
        
        # Tabela de Solicitantes
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS solicitantes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                email TEXT,
                telefone TEXT,
                departamento TEXT,
                data_cadastro DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Tabela de Protocolos
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS protocolos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                numero_protocolo TEXT UNIQUE NOT NULL,
                titulo TEXT NOT NULL,
                descricao TEXT,
                tipo_documento TEXT,
                status TEXT DEFAULT 'Pendente',
                data_protocolo DATE NOT NULL,
                data_prazo DATE,
                solicitante_id INTEGER,
                observacoes TEXT,
                criado_por INTEGER,
                data_criacao DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (solicitante_id) REFERENCES solicitantes(id),
                FOREIGN KEY (criado_por) REFERENCES usuarios(id)
            )
        ''')
        
        # Tabela de Logs do Sistema
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS logs_usuario (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario_id INTEGER,
                acao TEXT NOT NULL,
                tabela_afetada TEXT NOT NULL,
                registro_id INTEGER,
                detalhes TEXT,
                ip_address TEXT,
                user_agent TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'sucesso',
                FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
            )
        ''')
        
        # Criar usu√°rio administrador padr√£o se n√£o existir
        cursor.execute("SELECT COUNT(*) FROM usuarios WHERE nivel_acesso = 'admin'")
        if cursor.fetchone()[0] == 0:
            senha_hash = self.hash_senha("admin123")
            cursor.execute('''
                INSERT INTO usuarios (usuario, senha, nome, nivel_acesso)
                VALUES (?, ?, ?, ?)
            ''', ("admin", senha_hash, "Administrador", "admin"))
        
        conn.commit()
        conn.close()
    
    def hash_senha(self, senha):
        """Cria hash da senha"""
        return hashlib.sha256(senha.encode()).hexdigest()
    
    def gerar_numero_protocolo(self):
        """Gera um n√∫mero de protocolo √∫nico"""
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM protocolos")
        count = cursor.fetchone()[0]
        conn.close()
        
        ano = datetime.now().year
        return f"PROT-{ano}-{count + 1:04d}"

# Classe para autentica√ß√£o
class AuthManager:
    def __init__(self, db_manager, log_manager):
        self.db = db_manager
        self.log = log_manager
    
    def login(self, usuario, senha):
        """Autentica usu√°rio"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        senha_hash = self.db.hash_senha(senha)
        
        cursor.execute('''
            SELECT id, usuario, nome, nivel_acesso, ativo 
            FROM usuarios 
            WHERE usuario = ? AND senha = ? AND ativo = 1
        ''', (usuario, senha_hash))
        
        user = cursor.fetchone()
        
        if user:
            # Atualizar √∫ltimo login
            cursor.execute('''
                UPDATE usuarios SET ultimo_login = CURRENT_TIMESTAMP 
                WHERE id = ?
            ''', (user[0],))
            conn.commit()
            
            # Registrar log de login
            self.log.registrar_log(
                usuario_id=user[0],
                acao='LOGIN',
                tabela_afetada='usuarios',
                registro_id=user[0],
                detalhes=f"Login realizado com sucesso para usu√°rio: {user[1]}"
            )
        else:
            # Registrar tentativa de login falhada
            self.log.registrar_log(
                usuario_id=None,
                acao='LOGIN_FALHOU',
                tabela_afetada='usuarios',
                detalhes=f"Tentativa de login falhada para usu√°rio: {usuario}",
                status='erro'
            )
        
        conn.close()
        return user
    
    def criar_usuario(self, usuario, senha, nome, email, nivel_acesso, criado_por_id):
        """Cria novo usu√°rio"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        senha_hash = self.db.hash_senha(senha)
        
        try:
            cursor.execute('''
                INSERT INTO usuarios (usuario, senha, nome, email, nivel_acesso)
                VALUES (?, ?, ?, ?, ?)
            ''', (usuario, senha_hash, nome, email, nivel_acesso))
            
            novo_usuario_id = cursor.lastrowid
            conn.commit()
            
            # Registrar log de cria√ß√£o
            self.log.registrar_log(
                usuario_id=criado_por_id,
                acao='CRIAR',
                tabela_afetada='usuarios',
                registro_id=novo_usuario_id,
                detalhes={
                    'usuario_criado': usuario,
                    'nome': nome,
                    'email': email,
                    'nivel_acesso': nivel_acesso
                }
            )
            
            conn.close()
            return True
        except sqlite3.IntegrityError:
            # Registrar log de erro
            self.log.registrar_log(
                usuario_id=criado_por_id,
                acao='CRIAR_USUARIO_ERRO',
                tabela_afetada='usuarios',
                detalhes=f"Erro ao criar usu√°rio: {usuario} - Usu√°rio j√° existe",
                status='erro'
            )
            conn.close()
            return False
    
    def listar_usuarios(self):
        """Lista todos os usu√°rios"""
        conn = self.db.get_connection()
        df = pd.read_sql_query('''
            SELECT id, usuario, nome, email, nivel_acesso, ativo, 
                   data_cadastro, ultimo_login
            FROM usuarios ORDER BY nome
        ''', conn)
        conn.close()
        return df
    
    def atualizar_usuario(self, id, nome, email, nivel_acesso, ativo, atualizado_por_id):
        """Atualiza dados do usu√°rio"""
        # Buscar dados antigos para o log
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM usuarios WHERE id=?', (id,))
        dados_antigos = cursor.fetchone()
        
        cursor.execute('''
            UPDATE usuarios 
            SET nome=?, email=?, nivel_acesso=?, ativo=?
            WHERE id=?
        ''', (nome, email, nivel_acesso, ativo, id))
        conn.commit()
        
        # Registrar log de atualiza√ß√£o
        self.log.registrar_log(
            usuario_id=atualizado_por_id,
            acao='ATUALIZAR',
            tabela_afetada='usuarios',
            registro_id=id,
            detalhes={
                'campos_alterados': {
                    'nome': {'antes': dados_antigos[3], 'depois': nome},
                    'email': {'antes': dados_antigos[4], 'depois': email},
                    'nivel_acesso': {'antes': dados_antigos[5], 'depois': nivel_acesso},
                    'ativo': {'antes': dados_antigos[6], 'depois': ativo}
                }
            }
        )
        
        conn.close()
        return True
    
    def alterar_senha(self, id, nova_senha, alterado_por_id):
        """Altera senha do usu√°rio"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        senha_hash = self.db.hash_senha(nova_senha)
        cursor.execute('UPDATE usuarios SET senha=? WHERE id=?', (senha_hash, id))
        conn.commit()
        
        # Registrar log de altera√ß√£o de senha
        self.log.registrar_log(
            usuario_id=alterado_por_id,
            acao='ALTERAR_SENHA',
            tabela_afetada='usuarios',
            registro_id=id,
            detalhes=f"Senha alterada para usu√°rio ID: {id}"
        )
        
        conn.close()
        return True
    
    def deletar_usuario(self, id, deletado_por_id):
        """Deleta usu√°rio"""
        # Buscar dados do usu√°rio antes de deletar
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT usuario, nome FROM usuarios WHERE id=?', (id,))
        dados_usuario = cursor.fetchone()
        
        cursor.execute("DELETE FROM usuarios WHERE id=?", (id,))
        conn.commit()
        
        # Registrar log de exclus√£o
        self.log.registrar_log(
            usuario_id=deletado_por_id,
            acao='DELETAR',
            tabela_afetada='usuarios',
            registro_id=id,
            detalhes={
                'usuario_deletado': dados_usuario[0],
                'nome_deletado': dados_usuario[1]
            }
        )
        
        conn.close()
        return True

# CRUD para Solicitantes
class SolicitantesCRUD:
    def __init__(self, db_manager, log_manager):
        self.db = db_manager
        self.log = log_manager
    
    def criar(self, nome, email, telefone, departamento, criado_por_id):
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO solicitantes (nome, email, telefone, departamento)
            VALUES (?, ?, ?, ?)
        ''', (nome, email, telefone, departamento))
        
        solicitante_id = cursor.lastrowid
        conn.commit()
        
        # Registrar log de cria√ß√£o
        self.log.registrar_log(
            usuario_id=criado_por_id,
            acao='CRIAR',
            tabela_afetada='solicitantes',
            registro_id=solicitante_id,
            detalhes={
                'nome': nome,
                'email': email,
                'telefone': telefone,
                'departamento': departamento
            }
        )
        
        conn.close()
        return True
    
    def listar(self):
        conn = self.db.get_connection()
        df = pd.read_sql_query("SELECT * FROM solicitantes ORDER BY nome", conn)
        conn.close()
        return df
    
    def atualizar(self, id, nome, email, telefone, departamento, atualizado_por_id):
        # Buscar dados antigos
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM solicitantes WHERE id=?', (id,))
        dados_antigos = cursor.fetchone()
        
        cursor.execute('''
            UPDATE solicitantes 
            SET nome=?, email=?, telefone=?, departamento=?
            WHERE id=?
        ''', (nome, email, telefone, departamento, id))
        conn.commit()
        
        # Registrar log de atualiza√ß√£o
        self.log.registrar_log(
            usuario_id=atualizado_por_id,
            acao='ATUALIZAR',
            tabela_afetada='solicitantes',
            registro_id=id,
            detalhes={
                'campos_alterados': {
                    'nome': {'antes': dados_antigos[1], 'depois': nome},
                    'email': {'antes': dados_antigos[2], 'depois': email},
                    'telefone': {'antes': dados_antigos[3], 'depois': telefone},
                    'departamento': {'antes': dados_antigos[4], 'depois': departamento}
                }
            }
        )
        
        conn.close()
        return True
    
    def deletar(self, id, deletado_por_id):
        # Buscar dados antes de deletar
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT nome FROM solicitantes WHERE id=?', (id,))
        nome_solicitante = cursor.fetchone()[0]
        
        cursor.execute("DELETE FROM solicitantes WHERE id=?", (id,))
        conn.commit()
        
        # Registrar log de exclus√£o
        self.log.registrar_log(
            usuario_id=deletado_por_id,
            acao='DELETAR',
            tabela_afetada='solicitantes',
            registro_id=id,
            detalhes=f"Solicitante deletado: {nome_solicitante}"
        )
        
        conn.close()
        return True
    
    def buscar_por_id(self, id):
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM solicitantes WHERE id=?", (id,))
        result = cursor.fetchone()
        conn.close()
        return result

# CRUD para Protocolos
class ProtocolosCRUD:
    def __init__(self, db_manager, log_manager):
        self.db = db_manager
        self.log = log_manager
    
    def criar(self, titulo, descricao, tipo_documento, data_protocolo, data_prazo, 
              solicitante_id, observacoes, criado_por):
        conn = self.db.get_connection()
        cursor = conn.cursor()

        # Gerar o n√∫mero do protocolo automaticamente
        numero_protocolo = self.db.gerar_numero_protocolo()
        
        cursor.execute('''
            INSERT INTO protocolos (numero_protocolo, titulo, descricao, tipo_documento,
                                  data_protocolo, data_prazo, solicitante_id, 
                                  observacoes, criado_por)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (numero_protocolo, titulo, descricao, tipo_documento, data_protocolo, 
              data_prazo, solicitante_id, observacoes, criado_por))
        
        protocolo_id = cursor.lastrowid
        conn.commit()
        
        # Registrar log de cria√ß√£o
        self.log.registrar_log(
            usuario_id=criado_por,
            acao='CRIAR',
            tabela_afetada='protocolos',
            registro_id=protocolo_id,
            detalhes={
                'numero_protocolo': numero_protocolo,
                'titulo': titulo,
                'tipo_documento': tipo_documento,
                'solicitante_id': solicitante_id
            }
        )
        
        conn.close()
        return numero_protocolo
    
    def listar(self, usuario_id=None, nivel_acesso="admin"):
        conn = self.db.get_connection()
        
        if nivel_acesso == "admin":
            query = '''
                SELECT p.*, s.nome as solicitante_nome,
                       u.nome as criado_por_nome
                FROM protocolos p
                LEFT JOIN solicitantes s ON p.solicitante_id = s.id
                LEFT JOIN usuarios u ON p.criado_por = u.id
                ORDER BY p.numero_protocolo DESC
            '''
            df = pd.read_sql_query(query, conn)
        else:
            # Usu√°rios comuns s√≥ veem seus pr√≥prios protocolos
            query = '''
                SELECT p.*, s.nome as solicitante_nome,
                       u.nome as criado_por_nome
                FROM protocolos p
                LEFT JOIN solicitantes s ON p.solicitante_id = s.id
                LEFT JOIN usuarios u ON p.criado_por = u.id
                WHERE p.criado_por = ?
                ORDER BY p.numero_protocolo DESC
            '''
            df = pd.read_sql_query(query, conn, params=[usuario_id])
        
        conn.close()
        return df
    
    def atualizar(self, id, titulo, descricao, tipo_documento, status, data_protocolo, 
                  data_prazo, solicitante_id, observacoes, atualizado_por_id):
        # Buscar dados antigos
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM protocolos WHERE id=?', (id,))
        dados_antigos = cursor.fetchone()
        
        cursor.execute('''
            UPDATE protocolos 
            SET titulo=?, descricao=?, tipo_documento=?, status=?, data_protocolo=?,
                data_prazo=?, solicitante_id=?, observacoes=?
            WHERE id=?
        ''', (titulo, descricao, tipo_documento, status, data_protocolo, data_prazo,
              solicitante_id, observacoes, id))
        conn.commit()
        
        # Registrar log de atualiza√ß√£o
        self.log.registrar_log(
            usuario_id=atualizado_por_id,
            acao='ATUALIZAR',
            tabela_afetada='protocolos',
            registro_id=id,
            detalhes={
                'numero_protocolo': dados_antigos[1],
                'campos_alterados': {
                    'titulo': {'antes': dados_antigos[2], 'depois': titulo},
                    'status': {'antes': dados_antigos[5], 'depois': status},
                    'tipo_documento': {'antes': dados_antigos[4], 'depois': tipo_documento}
                }
            }
        )
        
        conn.close()
        return True
    
    def deletar(self, id, deletado_por_id):
        # Buscar dados antes de deletar
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT numero_protocolo, titulo FROM protocolos WHERE id=?', (id,))
        dados_protocolo = cursor.fetchone()
        
        cursor.execute("DELETE FROM protocolos WHERE id=?", (id,))
        conn.commit()
        
        # Registrar log de exclus√£o
        self.log.registrar_log(
            usuario_id=deletado_por_id,
            acao='DELETAR',
            tabela_afetada='protocolos',
            registro_id=id,
            detalhes={
                'numero_protocolo': dados_protocolo[0],
                'titulo': dados_protocolo[1]
            }
        )
        
        conn.close()
        return True
    
    def buscar_por_id(self, id):
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM protocolos WHERE id=?", (id,))
        result = cursor.fetchone()
        conn.close()
        return result

# Fun√ß√£o para verificar se o usu√°rio tem permiss√£o
def verificar_permissao(nivel_requerido):
    """Verifica se o usu√°rio logado tem o n√≠vel de acesso necess√°rio"""
    if 'user_data' not in st.session_state:
        return False
    
    user_level = st.session_state.user_data[3]  # nivel_acesso
    
    if nivel_requerido == "admin":
        return user_level == "admin"
    elif nivel_requerido == "usuario":
        return user_level in ["admin", "usuario"]
    
    return False

# Fun√ß√£o de logout
def logout():
    """Faz logout do usu√°rio"""
    if 'user_data' in st.session_state:
        # Registrar log de logout
        log_manager.registrar_log(
            usuario_id=st.session_state.user_data[0],
            acao='LOGOUT',
            tabela_afetada='usuarios',
            registro_id=st.session_state.user_data[0],
            detalhes=f"Logout realizado para usu√°rio: {st.session_state.user_data[1]}"
        )
    
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# P√°gina para visualizar logs
def pagina_logs():
    """P√°gina para visualiza√ß√£o e an√°lise de logs"""
    st.title("üìä Logs do Sistema")
    
    # Verificar permiss√£o de admin
    if not verificar_permissao("admin"):
        st.error("Acesso negado. Apenas administradores podem visualizar os logs.")
        return
    
    tabs = st.tabs(["üìã Lista de Logs", "üìà Estat√≠sticas", "üîç Filtros Avan√ßados"])
    
    with tabs[0]:
        st.subheader("Logs Recentes")
        
        # Buscar logs recentes
        logs_df = log_manager.buscar_logs(limite=50)
        
        if not logs_df.empty:
            # Configurar cores por status
            def colorir_status(status):
                if status == 'sucesso':
                    return 'background-color: #d4edda'
                elif status == 'erro':
                    return 'background-color: #f8d7da'
                else:
                    return ''
            
            # Mostrar tabela
            st.dataframe(
                logs_df[['timestamp', 'usuario_nome', 'acao', 'tabela_afetada', 'status', 'detalhes']],
                use_container_width=True
            )
        else:
            st.info("Nenhum log encontrado.")
    
    with tabs[1]:
        st.subheader("Estat√≠sticas de Atividade")
        
        df_acoes, df_usuarios, df_diario = log_manager.estatisticas_logs()
        
        col1, col2 = st.columns(2)
        
        with col1:
            if not df_acoes.empty:
                fig_acoes = px.pie(df_acoes, values='total', names='acao', 
                                 title='Distribui√ß√£o de A√ß√µes')
                st.plotly_chart(fig_acoes, use_container_width=True)
        
        with col2:
            if not df_usuarios.empty:
                fig_usuarios = px.bar(df_usuarios.head(10), x='nome', y='total_acoes',
                                    title='Top 10 Usu√°rios Mais Ativos')
                st.plotly_chart(fig_usuarios, use_container_width=True)
        
        # Gr√°fico de atividade di√°ria
        if not df_diario.empty:
            fig_diario = px.line(df_diario, x='data', y='total',
                               title='Atividade Di√°ria (√öltimos 30 dias)')
            st.plotly_chart(fig_diario, use_container_width=True)
    
    with tabs[2]:
        st.subheader("Filtros Avan√ßados")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Filtro por usu√°rio
            usuarios_df = auth_manager.listar_usuarios()
            usuario_opcoes = [{"label": "Todos", "value": None}] + \
                           [{"label": row['nome'], "value": row['id']} for _, row in usuarios_df.iterrows()]
            
            filtro_usuario = st.selectbox(
                "Filtrar por Usu√°rio:",
                options=[opt["value"] for opt in usuario_opcoes],
                format_func=lambda x: next((opt["label"] for opt in usuario_opcoes if opt["value"] == x), "Todos")
            )
        
        with col2:
            # Filtro por tabela
            filtro_tabela = st.selectbox(
                "Filtrar por Tabela:",
                ["Todas", "usuarios", "protocolos", "solicitantes"]
            )
            if filtro_tabela == "Todas":
                filtro_tabela = None
        
        with col3:
            # Filtro por a√ß√£o
            filtro_acao = st.selectbox(
                "Filtrar por A√ß√£o:",
                ["Todas", "CRIAR", "ATUALIZAR", "DELETAR", "LOGIN", "LOGOUT"]
            )
            if filtro_acao == "Todas":
                filtro_acao = None
        
        col4, col5 = st.columns(2)
        with col4:
            data_inicio = st.date_input("Data In√≠cio:")
        with col5:
            data_fim = st.date_input("Data Fim:")
        
        if st.button("üîç Aplicar Filtros"):
            logs_filtrados = log_manager.buscar_logs(
                filtro_usuario=filtro_usuario,
                filtro_tabela=filtro_tabela,
                filtro_acao=filtro_acao,
                data_inicio=data_inicio,
                data_fim=data_fim,
                limite=200
            )
            
            if not logs_filtrados.empty:
                st.dataframe(
                    logs_filtrados[['timestamp', 'usuario_nome', 'acao', 'tabela_afetada', 'status', 'detalhes']],
                    use_container_width=True
                )
                
                # Op√ß√£o para download
                csv = logs_filtrados.to_csv(index=False)
                st.download_button(
                    label="üì• Download CSV",
                    data=csv,
                    file_name=f"logs_sistema_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            else:
                st.info("Nenhum log encontrado com os filtros aplicados.")

# Inicializa√ß√£o
db_manager = DatabaseManager()
log_manager = LogManager(db_manager)
auth_manager = AuthManager(db_manager, log_manager)
solicitantes_crud = SolicitantesCRUD(db_manager, log_manager)
protocolos_crud = ProtocolosCRUD(db_manager, log_manager)

# P√°gina de Login
def pagina_login():
    st.title("üîê Sistema de Protocolo - Login")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("### Acesso ao Sistema")
        
        with st.form("login_form"):
            usuario = st.text_input("Usu√°rio")
            senha = st.text_input("Senha", type="password")
            submit = st.form_submit_button("Entrar")
            
            if submit:
                user_data = auth_manager.login(usuario, senha)
                if user_data:
                    st.session_state.authenticated = True
                    st.session_state.user_data = user_data
                    st.success(f"Bem-vindo, {user_data[2]}!")
                    st.rerun()
                else:
                    st.error("Usu√°rio ou senha inv√°lidos!")
        
        st.markdown("---")
        st.info("**D√∫vidas:** GCMADM | **admgcm@itapeva.sp.gov.br**")

# Dashboard
def dashboard():
    st.title("üìä Dashboard")
    
    # M√©tricas gerais
    col1, col2, col3, col4 = st.columns(4)
    
    # Buscar dados para m√©tricas
    protocolos_df = protocolos_crud.listar(
    #    st.session_state.user_data[0], 
    #    st.session_state.user_data[3]
    )
    solicitantes_df = solicitantes_crud.listar()
    
    with col1:
        st.metric("Total de Protocolos", len(protocolos_df))
    
    with col2:
        pendentes = len(protocolos_df[protocolos_df['status'] == 'Pendente'])
        st.metric("Protocolos Pendentes", pendentes)
    
    with col3:
        st.metric("Total de Solicitantes", len(solicitantes_df))
    
    with col4:
        # Protocolos vencidos (data_prazo < hoje)
        if not protocolos_df.empty:
            protocolos_df['data_prazo'] = pd.to_datetime(protocolos_df['data_prazo'])
            vencidos = len(protocolos_df[
                (protocolos_df['data_prazo'] < datetime.now()) & 
                (protocolos_df['status'] == 'Pendente')
            ])
            st.metric("Protocolos Vencidos", vencidos)
        else:
            st.metric("Protocolos Vencidos", 0)
    
    # Gr√°ficos
    if not protocolos_df.empty:
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de status
            status_counts = protocolos_df['status'].value_counts()
            fig_status = px.pie(values=status_counts.values, names=status_counts.index,
                              title="Distribui√ß√£o por Status")
            st.plotly_chart(fig_status, use_container_width=True)
        
        with col2:
            # Gr√°fico de tipos de documento
            tipo_counts = protocolos_df['tipo_documento'].value_counts()
            fig_tipo = px.bar(x=tipo_counts.index, y=tipo_counts.values,
                            title="Protocolos por Tipo de Documento")
            st.plotly_chart(fig_tipo, use_container_width=True)
    
    # Logs recentes (apenas para admin)
    if verificar_permissao("admin"):
        st.subheader("üìã Atividades Recentes")
        logs_recentes = log_manager.buscar_logs(limite=10)
        if not logs_recentes.empty:
            st.dataframe(
                logs_recentes[['timestamp', 'usuario_nome', 'acao', 'tabela_afetada']],
                use_container_width=True
            )

def gerar_relatorio_pdf(protocolos_df, filtro_data_inicio=None, filtro_data_fim=None, 
                       filtro_status=None, filtro_tipo=None):
    """
    Gera um relat√≥rio PDF dos protocolos com os filtros aplicados
    """
    buffer = BytesIO()
    
    # Configurar documento PDF
    doc = SimpleDocTemplate(
        buffer,
        pagesize=landscape(A4),
        rightMargin=0.5*inch,
        leftMargin=0.5*inch,
        topMargin=1*inch,
        bottomMargin=0.5*inch
    )
    
    # Estilos
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=1,  # Centralizado
        textColor=colors.darkblue
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=20,
        alignment=1,  # Centralizado
        textColor=colors.black
    )
    
    # Conte√∫do do PDF
    story = []
    
    # T√≠tulo
    story.append(Paragraph("RELAT√ìRIO DE PROTOCOLOS", title_style))
    
    # Informa√ß√µes do filtro
    filtros_aplicados = []
    if filtro_data_inicio and filtro_data_fim:
        filtros_aplicados.append(f"Per√≠odo: {filtro_data_inicio.strftime('%d/%m/%Y')} a {filtro_data_fim.strftime('%d/%m/%Y')}")
    elif filtro_data_inicio:
        filtros_aplicados.append(f"A partir de: {filtro_data_inicio.strftime('%d/%m/%Y')}")
    elif filtro_data_fim:
        filtros_aplicados.append(f"At√©: {filtro_data_fim.strftime('%d/%m/%Y')}")
    
    if filtro_status and filtro_status != "Todos":
        filtros_aplicados.append(f"Status: {filtro_status}")
    
    if filtro_tipo and filtro_tipo != "Todos":
        filtros_aplicados.append(f"Tipo: {filtro_tipo}")
    
    if filtros_aplicados:
        filtros_texto = " | ".join(filtros_aplicados)
        story.append(Paragraph(f"Filtros aplicados: {filtros_texto}", subtitle_style))
    
    # Data de gera√ß√£o
    data_geracao = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
    story.append(Paragraph(f"Gerado em: {data_geracao}", subtitle_style))
    
    # Total de registros
    total_protocolos = len(protocolos_df)
    story.append(Paragraph(f"Total de protocolos: {total_protocolos}", subtitle_style))
    
    story.append(Spacer(1, 20))
    
    if not protocolos_df.empty:
        # Preparar dados da tabela
        dados_tabela = [['N¬∫ Protocolo', 'T√≠tulo', 'Descri√ß√£o', 'Solicitante', 'Criado por', 'Data']]
        
        for _, row in protocolos_df.iterrows():
            # Truncar t√≠tulos muito longos
            titulo = row['titulo'][:40] + "..." if len(row['titulo']) > 40 else row['titulo']
            descricao = row['descricao'][:40] + "..." if len(row['descricao']) > 40 else row['descricao']
            
            # Formatar datas
            data_protocolo = row['data_protocolo']
            if isinstance(data_protocolo, str):
                try:
                    data_protocolo = datetime.strptime(data_protocolo, '%Y-%m-%d').strftime('%d/%m/%Y')
                except:
                    data_protocolo = data_protocolo
            
            #data_prazo = row.get('data_prazo', '')
            #if data_prazo and isinstance(data_prazo, str):
            #    try:
            #        data_prazo = datetime.strptime(data_prazo, '%Y-%m-%d').strftime('%d/%m/%Y')
            #    except:
                    pass
            
            dados_tabela.append([
                row['numero_protocolo'],
                titulo,
                row['descricao'],
                row.get('solicitante_nome', '')[:20] + "..." if len(str(row.get('solicitante_nome', ''))) > 20 else row.get('solicitante_nome', ''),
                row.get('criado_por_nome', '')[:20] + "..." if len(str(row.get('criado_por_nome', ''))) > 20 else row.get('criado_por_nome', ''),
                data_protocolo or '-'
                # data_prazo or '-'
            ])
        
        # Criar tabela
        tabela = Table(dados_tabela, colWidths=[1.0*inch, 1.0*inch, 5.5*inch, 1.7*inch, 1.3*inch, 0.8*inch])
        
        # Estilo da tabela
        tabela.setStyle(TableStyle([
            # Cabe√ßalho
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            
            # Corpo da tabela
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            
            # Bordas
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            
            # Alternating row colors
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
        ]))
        
        story.append(tabela)
        
        # Resumo por status
        story.append(Spacer(1, 30))
        story.append(Paragraph("RESUMO POR TIPO DE DOCUMENTO", title_style))
        
        resumo_status = protocolos_df['tipo_documento'].value_counts()
        dados_resumo = [['Tipo', 'Quantidade', 'Percentual']]
        
        for status, quantidade in resumo_status.items():
            percentual = (quantidade / total_protocolos) * 100
            dados_resumo.append([status, str(quantidade), f"{percentual:.1f}%"])
        
        tabela_resumo = Table(dados_resumo, colWidths=[2*inch, 1*inch, 1*inch])
        tabela_resumo.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        story.append(tabela_resumo)
    
    else:
        story.append(Paragraph("Nenhum protocolo encontrado com os filtros aplicados.", subtitle_style))
    
    # Gerar PDF
    doc.build(story)
    buffer.seek(0)
    return buffer

# Gerenciar Protocolos
def gerenciar_protocolos():
    st.title("üìã Gerenciar Protocolos")
    
    # Inicializar contador √∫nico para chaves se n√£o existir
    if 'key_counter' not in st.session_state:
        st.session_state.key_counter = 0
    
    def get_unique_key(base_key):
        """Gera uma chave √∫nica incrementando o contador"""
        st.session_state.key_counter += 1
        return f"{base_key}_{st.session_state.key_counter}"
    
    tabs = st.tabs(["üìù Novo Protocolo", "üìã Lista de Protocolos", "üìä Relat√≥rios"])
    
    with tabs[0]:
        st.subheader("Criar Novo Protocolo")
        
        with st.form("novo_protocolo"):
            col1, col2 = st.columns(2)
            
            with col1:
                titulo = st.text_input("T√≠tulo*", placeholder="T√≠tulo do protocolo")
                tipo_documento = st.selectbox("Tipo de Documento*", [
                    "Of√≠cio", "Memorando", "Relat√≥rio", "Solicita√ß√£o", 
                    "Recurso", "Processo", "Outros"
                ])
                data_prazo = st.date_input(
                    "Data Prazo", 
                    value=date.today(),
                    min_value=date.today(),  # N√£o permite datas anteriores √† data atual
                    help="A data prazo deve ser igual ou posterior √† data do protocolo"
                )
                
            
            with col2:
                # Listar solicitantes
                data_protocolo = st.date_input("Data do Protocolo*", value=date.today(), disabled=True)
                solicitantes_df = solicitantes_crud.listar()
                if not solicitantes_df.empty:
                    solicitante_opcoes = {
                        f"{row['nome']} - {row['departamento']}": row['id'] 
                        for _, row in solicitantes_df.iterrows()
                    }
                    solicitante_selecionado = st.selectbox("Solicitante*", list(solicitante_opcoes.keys()))
                    solicitante_id = solicitante_opcoes[solicitante_selecionado]
                else:
                    st.warning("Nenhum solicitante cadastrado. Cadastre um solicitante primeiro.")
                    solicitante_id = None
                
                           
            descricao = st.text_area("Descri√ß√£o", placeholder="Descri√ß√£o detalhada do protocolo")
            observacoes = st.text_area("Observa√ß√µes", placeholder="Observa√ß√µes adicionais")
            
            submit = st.form_submit_button("üöÄ Criar Protocolo")
            
            if submit:
                if titulo and tipo_documento and solicitante_id:
                    numero_protocolo = protocolos_crud.criar(
                        titulo=titulo,
                        descricao=descricao,
                        tipo_documento=tipo_documento,
                        data_protocolo=data_protocolo,
                        data_prazo=data_prazo,
                        solicitante_id=solicitante_id,
                        observacoes=observacoes,
                        criado_por=st.session_state.user_data[0]
                    )
                    st.success(f"‚úÖ Protocolo criado com sucesso! N√∫mero: {numero_protocolo}")
                    st.rerun()
                else:
                    st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
    
    with tabs[1]:
        st.subheader("Lista de Protocolos")
        
        # Verificar se o usu√°rio √© administrador
        is_admin = st.session_state.user_data[3] == 'admin'  # Assumindo que o tipo de usu√°rio est√° no √≠ndice 3
        current_user_id = st.session_state.user_data[0]  # ID do usu√°rio atual
        
        # Verificar se est√° editando um protocolo
        if 'editando_protocolo' in st.session_state:
            protocolo_id = st.session_state.editando_protocolo
            protocolo_data = protocolos_crud.buscar_por_id(protocolo_id)
            
            if protocolo_data:
                # Verificar permiss√£o para editar - assumindo que criado_por est√° no final da tupla
                # Vamos verificar diferentes poss√≠veis √≠ndices para criado_por_id
                protocolo_criado_por = None
                
                # Tentar encontrar o campo criado_por_id na tupla retornada
                if len(protocolo_data) > 10:
                    protocolo_criado_por = protocolo_data[10]  # √çndice 10
                elif len(protocolo_data) > 9:
                    protocolo_criado_por = protocolo_data[9]   # √çndice 9 (se observacoes for antes)
                
                # Debugging: mostrar informa√ß√µes do protocolo para verificar estrutura
                #if st.checkbox("üîç Debug: Mostrar estrutura do protocolo", key="debug_protocolo"):
                #    st.write("Dados do protocolo:", protocolo_data)
                #    st.write("Comprimento da tupla:", len(protocolo_data))
                #    st.write("ID do usu√°rio atual:", current_user_id)
                #    st.write("Criado por (tentativa):", protocolo_criado_por)
                
                # Permitir edi√ß√£o se for admin OU se for o criador do protocolo
                pode_editar = is_admin or (protocolo_criado_por == current_user_id)
                
                if not pode_editar:
                    st.error("‚ùå Voc√™ n√£o tem permiss√£o para editar este protocolo. Apenas o criador ou administradores podem editar.")
                    st.info(f"‚ÑπÔ∏è Este protocolo foi criado por outro usu√°rio (ID: {protocolo_criado_por}). Seu ID: {current_user_id}")
                    del st.session_state.editando_protocolo
                    st.rerun()
                else:
                    st.subheader(f"‚úèÔ∏è Editando Protocolo: {protocolo_data[1]}")  # numero_protocolo
                    
                    with st.form("editar_protocolo"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            titulo_edit = st.text_input("T√≠tulo*", value=protocolo_data[2])  # titulo
                            tipo_documento_edit = st.selectbox("Tipo de Documento*", 
                                ["Of√≠cio", "Memorando", "Relat√≥rio", "Solicita√ß√£o", "Recurso", "Processo", "Outros"],
                                index=["Of√≠cio", "Memorando", "Relat√≥rio", "Solicita√ß√£o", "Recurso", "Processo", "Outros"].index(protocolo_data[4]) if protocolo_data[4] in ["Of√≠cio", "Memorando", "Relat√≥rio", "Solicita√ß√£o", "Recurso", "Processo", "Outros"] else 0
                            )
                            status_edit = st.selectbox("Status*", 
                                ["Pendente", "Em Andamento", "Conclu√≠do", "Cancelado"],
                                index=["Pendente", "Em Andamento", "Conclu√≠do", "Cancelado"].index(protocolo_data[5]) if protocolo_data[5] in ["Pendente", "Em Andamento", "Conclu√≠do", "Cancelado"] else 0
                            )
                            data_protocolo_edit = st.date_input("Data do Protocolo*", 
                                value=datetime.strptime(protocolo_data[6], '%Y-%m-%d').date() if protocolo_data[6] else date.today(),
                                disabled=True,
                                help="A data do protocolo n√£o pode ser alterada ap√≥s a cria√ß√£o"
                            )
                        
                        with col2:
                            # Listar solicitantes
                            solicitantes_df = solicitantes_crud.listar()
                            if not solicitantes_df.empty:
                                solicitante_opcoes = {
                                    f"{row['nome']} - {row['departamento']}": row['id'] 
                                    for _, row in solicitantes_df.iterrows()
                                }
                                
                                # Encontrar o solicitante atual
                                solicitante_atual = None
                                for key, value in solicitante_opcoes.items():
                                    if value == protocolo_data[8]:  # solicitante_id
                                        solicitante_atual = key
                                        break
                                
                                if solicitante_atual:
                                    index_atual = list(solicitante_opcoes.keys()).index(solicitante_atual)
                                else:
                                    index_atual = 0
                                
                                solicitante_selecionado_edit = st.selectbox("Solicitante*", 
                                    list(solicitante_opcoes.keys()), 
                                    index=index_atual
                                )
                                solicitante_id_edit = solicitante_opcoes[solicitante_selecionado_edit]
                            else:
                                st.warning("Nenhum solicitante cadastrado.")
                                solicitante_id_edit = protocolo_data[8]
                            
                            data_prazo_edit = st.date_input("Data Prazo", 
                                value=datetime.strptime(protocolo_data[7], '%Y-%m-%d').date() if protocolo_data[7] else None,
                                min_value=datetime.strptime(protocolo_data[6], '%Y-%m-%d').date() if protocolo_data[6] else date.today(),
                                help="A data prazo deve ser igual ou posterior √† data do protocolo"
                            )
                        
                        descricao_edit = st.text_area("Descri√ß√£o", value=protocolo_data[3] or "")  # descricao
                        observacoes_edit = st.text_area("Observa√ß√µes", value=protocolo_data[9] or "")  # observacoes
                        
                        col_btn1, col_btn2 = st.columns(2)
                        
                        with col_btn1:
                            submit_edit = st.form_submit_button("üíæ Salvar Altera√ß√µes")
                        
                        with col_btn2:
                            cancel_edit = st.form_submit_button("‚ùå Cancelar")
                        
                        if submit_edit:
                            if titulo_edit and tipo_documento_edit and solicitante_id_edit:
                                if protocolos_crud.atualizar(
                                    id=protocolo_id,
                                    titulo=titulo_edit,
                                    descricao=descricao_edit,
                                    tipo_documento=tipo_documento_edit,
                                    status=status_edit,
                                    data_protocolo=data_protocolo_edit,
                                    data_prazo=data_prazo_edit,
                                    solicitante_id=solicitante_id_edit,
                                    observacoes=observacoes_edit,
                                    atualizado_por_id=current_user_id
                                ):
                                    st.success("‚úÖ Protocolo atualizado com sucesso!")
                                    del st.session_state.editando_protocolo
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao atualizar protocolo!")
                            else:
                                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
                        
                        if cancel_edit:
                            del st.session_state.editando_protocolo
                            st.rerun()
            else:
                st.error("Protocolo n√£o encontrado!")
                del st.session_state.editando_protocolo
                st.rerun()
        
        else:
            # Filtros - Inicializar vari√°veis antes de usar
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # MODIFICA√á√ÉO: Filtro por Solicitantes em vez de Status
                # Buscar lista de solicitantes para o filtro
                solicitantes_df = solicitantes_crud.listar()
                if not solicitantes_df.empty:
                    solicitante_opcoes_filtro = ["Todos"] + [f"{row['nome']} - {row['departamento']}" for _, row in solicitantes_df.iterrows()]
                    filtro_solicitante = st.selectbox("Filtrar por Solicitante:", 
                                                    solicitante_opcoes_filtro,
                                                    key="filtro_solicitante_select")
                    
                    # Obter ID do solicitante selecionado para filtro
                    if filtro_solicitante != "Todos":
                        solicitante_filtro_id = solicitantes_df[
                            solicitantes_df.apply(lambda row: f"{row['nome']} - {row['departamento']}" == filtro_solicitante, axis=1)
                        ]['id'].iloc[0]
                    else:
                        solicitante_filtro_id = None
                else:
                    st.info("Nenhum solicitante cadastrado.")
                    filtro_solicitante = "Todos"
                    solicitante_filtro_id = None
            
            with col2:
                filtro_tipo = st.selectbox("Filtrar por Tipo:", 
                                         ["Todos", "Of√≠cio", "Memorando", "Relat√≥rio", "Solicita√ß√£o", "Recurso", "Processo", "Outros"],
                                         key="filtro_tipo_select")
            
            with col3:
                busca_texto = st.text_input("Buscar por t√≠tulo/n√∫mero:", key="busca_texto_input")
            
            # Listar protocolos - ALTERA√á√ÉO: Administrador v√™ todos, usu√°rio comum v√™ todos mas s√≥ edita os seus
            try:
                # Todos os usu√°rios podem ver todos os protocolos
                protocolos_df = protocolos_crud.listar()  # M√©todo que lista todos os protocolos
                
            except Exception as e:
                st.error(f"Erro ao carregar protocolos: {str(e)}")
                protocolos_df = pd.DataFrame()  # DataFrame vazio em caso de erro
            
            # Verificar se o DataFrame foi carregado corretamente
            if not protocolos_df.empty:
                # Aplicar filtros apenas se as vari√°veis est√£o definidas
                try:
                    # MODIFICA√á√ÉO: Filtro por solicitante em vez de status
                    if solicitante_filtro_id is not None:
                        protocolos_df = protocolos_df[protocolos_df['solicitante_id'] == solicitante_filtro_id]
                    
                    if filtro_tipo and filtro_tipo != "Todos":
                        protocolos_df = protocolos_df[protocolos_df['tipo_documento'] == filtro_tipo]
                    
                    if busca_texto and busca_texto.strip():
                        mask = (protocolos_df['titulo'].str.contains(busca_texto, case=False, na=False) |
                               protocolos_df['numero_protocolo'].str.contains(busca_texto, case=False, na=False))
                        protocolos_df = protocolos_df[mask]
                except Exception as e:
                    st.error(f"Erro ao aplicar filtros: {str(e)}")
                
                # Exibir informa√ß√£o sobre permiss√µes
                if not is_admin:
                    st.info("‚ÑπÔ∏è Voc√™ pode visualizar todos os protocolos, mas s√≥ pode editar os protocolos criados por voc√™. Apenas administradores podem excluir protocolos.")
                
                # Mostrar tabela
                if not protocolos_df.empty:
                    for index, protocolo in protocolos_df.iterrows():
                        # Usar uma combina√ß√£o de ID do protocolo e timestamp para garantir unicidade
                        unique_suffix = f"{protocolo['id']}_{index}_{hash(str(protocolo))}"
                        
                        # Verificar se o usu√°rio pode editar este protocolo
                        # Tentar diferentes campos poss√≠veis para criado_por_id
                        protocolo_criado_por_id = None
                        
                        # Verificar poss√≠veis nomes de colunas para criado_por_id
                        if 'criado_por_id' in protocolo:
                            protocolo_criado_por_id = protocolo['criado_por_id']
                        elif 'criado_por' in protocolo:
                            protocolo_criado_por_id = protocolo['criado_por']
                        elif 'user_id' in protocolo:
                            protocolo_criado_por_id = protocolo['user_id']
                        
                        # Debugging: adicionar informa√ß√£o sobre criado_por_id
                        #if st.checkbox(f"üîç Debug protocolo {protocolo['numero_protocolo']}", key=f"debug_{unique_suffix}"):
                        #    st.write("Colunas dispon√≠veis:", list(protocolo.keys()))
                        #    st.write("ID do protocolo:", protocolo['id'])
                        #    st.write("Criado por ID encontrado:", protocolo_criado_por_id)
                        #    st.write("ID do usu√°rio atual:", current_user_id)
                        
                        pode_editar = is_admin or (protocolo_criado_por_id == current_user_id)

                        # Se data_protocolo for um objeto datetime
                        if isinstance(protocolo['data_protocolo'], datetime):
                            data_formatada = protocolo['data_protocolo'].strftime('%d%m%Y')
                        else:
                            # Se for string, primeiro converte para datetime e depois formata
                            # Ajuste o formato de entrada conforme necess√°rio
                            data_obj = datetime.strptime(protocolo['data_protocolo'], '%Y-%m-%d')  # Formato de entrada exemplo
                            data_formatada = data_obj.strftime('%d/%m/%Y')

                        # Adicionar indicador visual para protocolos pr√≥prios
                        titulo_protocolo = f"üìã {protocolo['numero_protocolo']} - {protocolo['titulo']} - {data_formatada} - **Solicitante:** {protocolo['solicitante_nome']} - **Descri√ß√£o:** {protocolo['descricao']}"
                        if not is_admin and protocolo_criado_por_id == current_user_id:
                            titulo_protocolo += " üë§ (Seu protocolo)"
                        
                        with st.expander(titulo_protocolo):
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.write(f"**Status:** {protocolo['status']}")
                                st.write(f"**Tipo:** {protocolo['tipo_documento']}")
                                st.write(f"**Data:** {protocolo['data_protocolo']}")
                            
                            with col2:
                                st.write(f"**Solicitante:** {protocolo['solicitante_nome']}")
                                st.write(f"**Criado por:** {protocolo['criado_por_nome']}")
                                if protocolo['data_prazo']:
                                    st.write(f"**Prazo:** {protocolo['data_prazo']}")
                            
                            with col3:
                                # Bot√£o de editar - dispon√≠vel para o criador ou admin
                                if pode_editar:
                                    if st.button(f"‚úèÔ∏è Editar", key=f"edit_{unique_suffix}"):
                                        st.session_state.editando_protocolo = protocolo['id']
                                        st.rerun()
                                else:
                                    st.button(f"‚úèÔ∏è Editar", key=f"edit_{unique_suffix}", 
                                            disabled=True, 
                                            help="Voc√™ s√≥ pode editar protocolos criados por voc√™")
                                
                                # Bot√£o de excluir - APENAS para administradores
                                if is_admin:
                                    if st.button(f"üóëÔ∏è Excluir", key=f"del_{unique_suffix}"):
                                        if protocolos_crud.deletar(protocolo['id'], current_user_id):
                                            st.success("Protocolo exclu√≠do com sucesso!")
                                            st.rerun()
                                        else:
                                            st.error("Erro ao excluir protocolo!")
                            
                            if protocolo['descricao']:
                                st.write(f"**Descri√ß√£o:** {protocolo['descricao']}")
                            
                            if protocolo['observacoes']:
                                st.write(f"**Observa√ß√µes:** {protocolo['observacoes']}")
                else:
                    st.info("Nenhum protocolo encontrado com os filtros aplicados.")
            else:
                st.info("Nenhum protocolo encontrado.")
    
    # Nova aba de relat√≥rios
    with tabs[2]:
        st.subheader("üìä Relat√≥rios em PDF")
        
        st.markdown("""
        Gere relat√≥rios completos dos protocolos em formato PDF com filtros personalizados.
        """)
        
        # Filtros para relat√≥rio
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìÖ Filtro por Data**")
            filtro_data_inicio = st.date_input(
                "Data de in√≠cio:",
                value=None,
                key="relatorio_data_inicio",
                help="Deixe em branco para incluir todos os protocolos desde o in√≠cio"
            )
            
            filtro_data_fim = st.date_input(
                "Data de fim:",
                value=None,
                key="relatorio_data_fim",
                help="Deixe em branco para incluir todos os protocolos at√© hoje"
            )
        
        with col2:
            st.markdown("**üîç Filtros Adicionais**")
            filtro_status_relatorio = st.selectbox(
                "Status:",
                ["Todos", "Pendente", "Em Andamento", "Conclu√≠do", "Cancelado"],
                key="relatorio_status"
            )
            
            filtro_tipo_relatorio = st.selectbox(
                "Tipo de Documento:",
                ["Todos", "Of√≠cio", "Memorando", "Relat√≥rio", "Solicita√ß√£o", "Recurso", "Processo", "Outros"],
                key="relatorio_tipo"
            )
        
        # Valida√ß√£o de datas
        data_valida = True
        if filtro_data_inicio and filtro_data_fim and filtro_data_inicio > filtro_data_fim:
            st.error("‚ùå A data de in√≠cio n√£o pode ser posterior √† data de fim!")
            data_valida = False
        
        # Bot√£o para gerar relat√≥rio
        if st.button("üìÑ Gerar Relat√≥rio PDF", disabled=not data_valida):
            with st.spinner("Gerando relat√≥rio PDF..."):
                try:
                    # Carregar protocolos
                    protocolos_df = protocolos_crud.listar()
                    
                    if not protocolos_df.empty:
                        # Aplicar filtros de data
                        if filtro_data_inicio:
                            # Converter coluna de data para datetime se necess√°rio
                            protocolos_df['data_protocolo_dt'] = pd.to_datetime(protocolos_df['data_protocolo'])
                            protocolos_df = protocolos_df[protocolos_df['data_protocolo_dt'] >= pd.to_datetime(filtro_data_inicio)]
                        
                        if filtro_data_fim:
                            if 'data_protocolo_dt' not in protocolos_df.columns:
                                protocolos_df['data_protocolo_dt'] = pd.to_datetime(protocolos_df['data_protocolo'])
                            protocolos_df = protocolos_df[protocolos_df['data_protocolo_dt'] <= pd.to_datetime(filtro_data_fim)]
                        
                        # Aplicar outros filtros
                        if filtro_status_relatorio != "Todos":
                            protocolos_df = protocolos_df[protocolos_df['status'] == filtro_status_relatorio]
                        
                        if filtro_tipo_relatorio != "Todos":
                            protocolos_df = protocolos_df[protocolos_df['tipo_documento'] == filtro_tipo_relatorio]
                        
                        # Remover coluna auxiliar se foi criada
                        if 'data_protocolo_dt' in protocolos_df.columns:
                            protocolos_df = protocolos_df.drop('data_protocolo_dt', axis=1)
                        
                        # Gerar PDF
                        pdf_buffer = gerar_relatorio_pdf(
                            protocolos_df,
                            filtro_data_inicio,
                            filtro_data_fim,
                            filtro_status_relatorio,
                            filtro_tipo_relatorio
                        )
                        
                        # Nome do arquivo
                        nome_arquivo = "relatorio_protocolos"
                        if filtro_data_inicio and filtro_data_fim:
                            nome_arquivo += f"_{filtro_data_inicio.strftime('%Y%m%d')}_a_{filtro_data_fim.strftime('%Y%m%d')}"
                        elif filtro_data_inicio:
                            nome_arquivo += f"_a_partir_{filtro_data_inicio.strftime('%Y%m%d')}"
                        elif filtro_data_fim:
                            nome_arquivo += f"_ate_{filtro_data_fim.strftime('%Y%m%d')}"
                        
                        nome_arquivo += f"_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                        
                        # Bot√£o de download
                        st.success(f"‚úÖ Relat√≥rio gerado com sucesso! Total de {len(protocolos_df)} protocolos encontrados.")
                        
                        st.download_button(
                            label="üì• Baixar Relat√≥rio PDF",
                            data=pdf_buffer.getvalue(),
                            file_name=nome_arquivo,
                            mime="application/pdf",
                            key="download_relatorio"
                        )
                        
                        # Mostrar pr√©via dos dados
                        if len(protocolos_df) > 0:
                            st.markdown("**üìã Pr√©via dos dados inclu√≠dos no relat√≥rio:**")
                            
                            # Resumo por status
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("Total de Protocolos", len(protocolos_df))
                            
                            with col2:
                                if filtro_data_inicio and filtro_data_fim:
                                    dias_periodo = (filtro_data_fim - filtro_data_inicio).days + 1
                                    st.metric("Per√≠odo (dias)", dias_periodo)
                                else:
                                    st.metric("Per√≠odo", "N√£o definido")
                            
                            with col3:
                                tipos_unicos = protocolos_df['tipo_documento'].nunique()
                                st.metric("Tipos Diferentes", tipos_unicos)
                            
                            # Gr√°fico de status
                            st.markdown("**üìä Distribui√ß√£o por Status:**")
                            status_counts = protocolos_df['status'].value_counts()
                            
                            col1, col2 = st.columns([2, 1])
                            
                            with col1:
                                st.bar_chart(status_counts)
                            
                            with col2:
                                for status, count in status_counts.items():
                                    percentual = (count / len(protocolos_df)) * 100
                                    st.write(f"**{status}:** {count} ({percentual:.1f}%)")
                            
                            # Tabela resumida
                            st.markdown("**üìã Primeiros 10 protocolos do relat√≥rio:**")
                            colunas_exibicao = ['numero_protocolo', 'titulo', 'tipo_documento', 'status', 'data_protocolo']
                            df_preview = protocolos_df[colunas_exibicao].head(10)
                            st.dataframe(df_preview, use_container_width=True)
                        
                    else:
                        st.warning("‚ö†Ô∏è Nenhum protocolo encontrado para gerar o relat√≥rio!")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar relat√≥rio: {str(e)}")
                    st.error("Verifique se todos os dados est√£o corretos e tente novamente.")
        
        # Informa√ß√µes sobre o relat√≥rio
        st.markdown("---")
        st.markdown("**‚ÑπÔ∏è Informa√ß√µes sobre o Relat√≥rio:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üìÑ Conte√∫do do Relat√≥rio:**
            - Lista completa de protocolos filtrados
            - Informa√ß√µes b√°sicas: n√∫mero, t√≠tulo, tipo, status
            - Dados do solicitante e datas
            - Resumo estat√≠stico por status
            - Data e hora de gera√ß√£o
            """)
        
        with col2:
            st.markdown("""
            **üîß Funcionalidades:**
            - Filtro por per√≠odo (data in√≠cio/fim)
            - Filtro por solicitante do protocolo
            - Filtro por tipo de documento
            - Formato PDF profissional
            - Download direto do arquivo
            """)
        
        
                                
# Gerenciar Solicitantes
def gerenciar_solicitantes():
    st.title("üë• Gerenciar Solicitantes")
    
    # Verificar se est√° editando um solicitante
    if 'editando_solicitante' in st.session_state and st.session_state.editando_solicitante:
        editar_solicitante()
        return
    
    tabs = st.tabs(["‚ûï Novo Solicitante", "üìã Lista de Solicitantes"])
    
    with tabs[0]:
        st.subheader("Cadastrar Novo Solicitante")
        
        with st.form("novo_solicitante"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome*", placeholder="Nome completo")
                email = st.text_input("Email", placeholder="email@exemplo.com")
            
            with col2:
                telefone = st.text_input("Telefone", placeholder="(11) 99999-9999")
                departamento = st.text_input("Departamento", placeholder="Ex: Recursos Humanos")
            
            submit = st.form_submit_button("üíæ Cadastrar")
            
            if submit:
                if nome:
                    if solicitantes_crud.criar(nome, email, telefone, departamento, st.session_state.user_data[0]):
                        st.success("‚úÖ Solicitante cadastrado com sucesso!")
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao cadastrar solicitante!")
                else:
                    st.error("‚ùå O nome √© obrigat√≥rio!")
    
    with tabs[1]:
        st.subheader("Lista de Solicitantes")
        
        solicitantes_df = solicitantes_crud.listar()
        
        if not solicitantes_df.empty:
            # Busca
            busca = st.text_input("üîç Buscar solicitante:")
            
            if busca:
                mask = (solicitantes_df['nome'].str.contains(busca, case=False, na=False) |
                       solicitantes_df['departamento'].str.contains(busca, case=False, na=False))
                solicitantes_df = solicitantes_df[mask]
            
            # Mostrar em cards
            for _, solicitante in solicitantes_df.iterrows():
                with st.expander(f"üë§ {solicitante['nome']} - {solicitante['departamento']}"):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"**Nome:** {solicitante['nome']}")
                        st.write(f"**Departamento:** {solicitante['departamento']}")
                    
                    with col2:
                        st.write(f"**Email:** {solicitante['email'] or 'N√£o informado'}")
                        st.write(f"**Telefone:** {solicitante['telefone'] or 'N√£o informado'}")
                    
                    with col3:
                        if st.button(f"‚úèÔ∏è Editar", key=f"edit_sol_{solicitante['id']}"):
                            st.session_state.editando_solicitante = solicitante['id']
                            st.rerun()
                        
                        if st.button(f"üóëÔ∏è Excluir", key=f"del_sol_{solicitante['id']}"):
                            # Usar checkbox para confirma√ß√£o
                            confirm_key = f"confirm_del_{solicitante['id']}"
                            if confirm_key not in st.session_state:
                                st.session_state[confirm_key] = False
                            
                            if not st.session_state[confirm_key]:
                                st.session_state[confirm_key] = True
                                st.warning("‚ö†Ô∏è Clique novamente para confirmar a exclus√£o!")
                                st.rerun()
                            else:
                                if solicitantes_crud.deletar(solicitante['id'], st.session_state.user_data[0]):
                                    st.success("‚úÖ Solicitante exclu√≠do com sucesso!")
                                    # Limpar estado de confirma√ß√£o
                                    del st.session_state[confirm_key]
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao excluir solicitante!")
                                    st.session_state[confirm_key] = False
        else:
            st.info("üìù Nenhum solicitante cadastrado.")


def editar_solicitante():
    """Fun√ß√£o para editar um solicitante existente"""
    st.title("‚úèÔ∏è Editar Solicitante")
    
    # Bot√£o para voltar
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚Üê Voltar"):
            if 'editando_solicitante' in st.session_state:
                del st.session_state.editando_solicitante
            st.rerun()
    
    # Buscar dados do solicitante
    solicitante_id = st.session_state.editando_solicitante
    
    # Buscar o solicitante na lista (alternativa se n√£o tiver buscar_por_id)
    try:
        # Tentar usar buscar_por_id se existir
        if hasattr(solicitantes_crud, 'buscar_por_id'):
            solicitante_raw = solicitantes_crud.buscar_por_id(solicitante_id)
        else:
            # Usar a fun√ß√£o listar() para encontrar o solicitante
            solicitantes_df = solicitantes_crud.listar()
            solicitante_filtered = solicitantes_df[solicitantes_df['id'] == solicitante_id]
            
            if not solicitante_filtered.empty:
                solicitante_raw = solicitante_filtered.iloc[0].to_dict()
            else:
                solicitante_raw = None
    except Exception as e:
        st.error(f"Erro ao buscar solicitante: {e}")
        solicitante_raw = None
    
    if not solicitante_raw:
        st.error("‚ùå Solicitante n√£o encontrado!")
        if st.button("Voltar √† lista"):
            if 'editando_solicitante' in st.session_state:
                del st.session_state.editando_solicitante
            st.rerun()
        return
    
    # Converter tupla para dicion√°rio se necess√°rio
    if isinstance(solicitante_raw, tuple):
        # Assumindo a ordem: id, nome, email, telefone, departamento, criado_por, data_criacao, data_atualizacao
        solicitante = {
            'id': solicitante_raw[0],
            'nome': solicitante_raw[1],
            'email': solicitante_raw[2],
            'telefone': solicitante_raw[3],
            'departamento': solicitante_raw[4],
            'criado_por': solicitante_raw[5] if len(solicitante_raw) > 5 else None,
            'data_criacao': solicitante_raw[6] if len(solicitante_raw) > 6 else None,
            'data_atualizacao': solicitante_raw[7] if len(solicitante_raw) > 7 else None
        }
    else:
        solicitante = solicitante_raw
    
    st.info(f"üìù Editando: **{solicitante['nome']}**")
    
    # Formul√°rio de edi√ß√£o
    with st.form("editar_solicitante"):
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input(
                "Nome*", 
                value=solicitante['nome'],
                placeholder="Nome completo"
            )
            email = st.text_input(
                "Email", 
                value=solicitante['email'] or '',
                placeholder="email@exemplo.com"
            )
        
        with col2:
            telefone = st.text_input(
                "Telefone", 
                value=solicitante['telefone'] or '',
                placeholder="(11) 99999-9999"
            )
            departamento = st.text_input(
                "Departamento", 
                value=solicitante['departamento'] or '',
                placeholder="Ex: Recursos Humanos"
            )
        
        # Bot√µes do formul√°rio
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col2:
            cancelar = st.form_submit_button("‚ùå Cancelar", type="secondary")
        
        with col3:
            salvar = st.form_submit_button("üíæ Salvar", type="primary")
        
        # Processar a√ß√µes do formul√°rio
        if cancelar:
            if 'editando_solicitante' in st.session_state:
                del st.session_state.editando_solicitante
            st.rerun()
        
        if salvar:
            if nome.strip():
                # Verificar se houve mudan√ßas
                dados_originais = {
                    'nome': solicitante['nome'],
                    'email': solicitante['email'] or '',
                    'telefone': solicitante['telefone'] or '',
                    'departamento': solicitante['departamento'] or ''
                }
                
                dados_novos = {
                    'nome': nome.strip(),
                    'email': email.strip(),
                    'telefone': telefone.strip(),
                    'departamento': departamento.strip()
                }
                
                if dados_originais != dados_novos:
                    # Atualizar solicitante
                    try:
                        if hasattr(solicitantes_crud, 'atualizar'):
                            success = solicitantes_crud.atualizar(
                                solicitante_id, 
                                nome.strip(), 
                                email.strip() if email.strip() else None,
                                telefone.strip() if telefone.strip() else None,
                                departamento.strip() if departamento.strip() else None,
                                st.session_state.user_data[0]
                            )
                        else:
                            # Se n√£o tem fun√ß√£o atualizar, pode usar a fun√ß√£o criar com modifica√ß√µes
                            st.error("‚ùå Fun√ß√£o de atualiza√ß√£o n√£o implementada no CRUD!")
                            success = False
                        
                        if success:
                            st.success("‚úÖ Solicitante atualizado com sucesso!")
                            # Limpar estado de edi√ß√£o
                            if 'editando_solicitante' in st.session_state:
                                del st.session_state.editando_solicitante
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao atualizar solicitante!")
                    except Exception as e:
                        st.error(f"‚ùå Erro ao atualizar solicitante: {e}")
                else:
                    st.info("‚ÑπÔ∏è Nenhuma altera√ß√£o foi feita.")
            else:
                st.error("‚ùå O nome √© obrigat√≥rio!")
    
    # Se√ß√£o de informa√ß√µes adicionais
    st.divider()
    
    with st.expander("üìä Informa√ß√µes do Solicitante"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**ID:** {solicitante['id']}")
            st.write(f"**Criado por:** {solicitante.get('criado_por', 'N/A')}")
        
        with col2:
            if 'data_criacao' in solicitante and solicitante['data_criacao']:
                st.write(f"**Data de Cria√ß√£o:** {solicitante['data_criacao']}")
            if 'data_atualizacao' in solicitante and solicitante['data_atualizacao']:
                st.write(f"**√öltima Atualiza√ß√£o:** {solicitante['data_atualizacao']}")
    
    # Se√ß√£o de estat√≠sticas (se dispon√≠vel)
    with st.expander("üìà Estat√≠sticas de Solicita√ß√µes"):
        # Aqui voc√™ pode adicionar estat√≠sticas do solicitante
        # Por exemplo, n√∫mero de solicita√ß√µes feitas, etc.
        st.info("üöß Funcionalidade em desenvolvimento - mostrar√° estat√≠sticas das solicita√ß√µes deste solicitante.")             

# Gerenciar Usu√°rios (apenas admin)
def gerenciar_usuarios():
    st.title("üë®‚Äçüíº Gerenciar Usu√°rios")
    
    if not verificar_permissao("admin"):
        st.error("Acesso negado!")
        return
    
    # Verificar se est√° editando um usu√°rio
    if 'editando_usuario' in st.session_state and st.session_state.editando_usuario:
        editar_usuario_modal()
        return
    
    tabs = st.tabs(["‚ûï Novo Usu√°rio", "üìã Lista de Usu√°rios"])
    
    with tabs[0]:
        st.subheader("Criar Novo Usu√°rio")
        
        with st.form("novo_usuario"):
            col1, col2 = st.columns(2)
            
            with col1:
                usuario = st.text_input("Usu√°rio*", placeholder="nome.usuario")
                nome = st.text_input("Nome Completo*", placeholder="Nome completo")
                email = st.text_input("Email", placeholder="email@exemplo.com")
            
            with col2:
                senha = st.text_input("Senha*", type="password")
                confirmar_senha = st.text_input("Confirmar Senha*", type="password")
                nivel_acesso = st.selectbox("N√≠vel de Acesso*", ["usuario", "admin"])
            
            submit = st.form_submit_button("üë§ Criar Usu√°rio")
            
            if submit:
                if usuario and nome and senha and confirmar_senha:
                    if senha == confirmar_senha:
                        if auth_manager.criar_usuario(usuario, senha, nome, email, nivel_acesso, st.session_state.user_data[0]):
                            st.success("‚úÖ Usu√°rio criado com sucesso!")
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao criar usu√°rio! Usu√°rio j√° existe.")
                    else:
                        st.error("‚ùå As senhas n√£o coincidem!")
                else:
                    st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
    
    with tabs[1]:
        st.subheader("Lista de Usu√°rios")
        
        usuarios_df = auth_manager.listar_usuarios()
        
        if not usuarios_df.empty:
            for _, usuario in usuarios_df.iterrows():
                with st.expander(f"üë§ {usuario['nome']} ({usuario['usuario']})"):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"**Nome:** {usuario['nome']}")
                        st.write(f"**Usu√°rio:** {usuario['usuario']}")
                        st.write(f"**Email:** {usuario['email'] or 'N√£o informado'}")
                    
                    with col2:
                        st.write(f"**N√≠vel:** {usuario['nivel_acesso'].title()}")
                        st.write(f"**Status:** {'Ativo' if usuario['ativo'] else 'Inativo'}")
                        st.write(f"**Cadastro:** {usuario['data_cadastro'][:10]}")
                        if usuario['ultimo_login']:
                            st.write(f"**√öltimo Login:** {usuario['ultimo_login'][:16]}")
                    
                    with col3:
                        if st.button(f"‚úèÔ∏è Editar", key=f"edit_user_{usuario['id']}"):
                            st.session_state.editando_usuario = usuario['id']
                            st.rerun()
                        
                        if usuario['id'] != st.session_state.user_data[0]:  # N√£o pode excluir a si mesmo
                            if st.button(f"üóëÔ∏è Excluir", key=f"del_user_{usuario['id']}", 
                                       help="Aten√ß√£o: Esta a√ß√£o n√£o pode ser desfeita!"):
                                if st.button(f"‚ö†Ô∏è Confirmar Exclus√£o", key=f"confirm_del_{usuario['id']}"):
                                    if auth_manager.deletar_usuario(usuario['id'], st.session_state.user_data[0]):
                                        st.success("‚úÖ Usu√°rio exclu√≠do com sucesso!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå Erro ao excluir usu√°rio!")
                        else:
                            st.info("‚ÑπÔ∏è N√£o √© poss√≠vel excluir seu pr√≥prio usu√°rio")
        else:
            st.info("Nenhum usu√°rio cadastrado.")

def editar_usuario_modal():
    """Modal para editar dados do usu√°rio"""
    st.title("‚úèÔ∏è Editar Usu√°rio")
    
    usuario_id = st.session_state.editando_usuario
    
    # Buscar dados do usu√°rio
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM usuarios WHERE id=?', (usuario_id,))
    usuario_dados = cursor.fetchone()
    conn.close()
    
    if not usuario_dados:
        st.error("Usu√°rio n√£o encontrado!")
        st.session_state.editando_usuario = None
        st.rerun()
        return
    
    # Bot√£o para voltar
    if st.button("‚Üê Voltar para Lista de Usu√°rios"):
        st.session_state.editando_usuario = None
        st.rerun()
    
    st.markdown("---")
    
    # Dados atuais do usu√°rio
    id_usuario, usuario, senha, nome, email, nivel_acesso, ativo, data_cadastro, ultimo_login = usuario_dados
    
    # Tabs para diferentes tipos de edi√ß√£o
    tabs = st.tabs(["üìù Dados B√°sicos", "üîê Alterar Senha", "üóëÔ∏è Gerenciar Acesso"])
    
    with tabs[0]:
        st.subheader("Editar Dados B√°sicos")
        
        with st.form("editar_usuario"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome_novo = st.text_input("Nome Completo*", value=nome)
                email_novo = st.text_input("Email", value=email or "")
            
            with col2:
                nivel_acesso_novo = st.selectbox("N√≠vel de Acesso*", 
                                               ["usuario", "admin"], 
                                               index=0 if nivel_acesso == "usuario" else 1)
                ativo_novo = st.checkbox("Usu√°rio Ativo", value=bool(ativo))
            
            st.markdown("---")
            col1, col2 = st.columns(2)
            
            with col1:
                if st.form_submit_button("üíæ Salvar Altera√ß√µes"):
                    if nome_novo:
                        if auth_manager.atualizar_usuario(id_usuario, nome_novo, email_novo, 
                                                        nivel_acesso_novo, ativo_novo, 
                                                        st.session_state.user_data[0]):
                            st.success("‚úÖ Dados atualizados com sucesso!")
                            st.session_state.editando_usuario = None
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao atualizar usu√°rio!")
                    else:
                        st.error("‚ùå Nome √© obrigat√≥rio!")
            
            with col2:
                if st.form_submit_button("‚ùå Cancelar"):
                    st.session_state.editando_usuario = None
                    st.rerun()
    
    with tabs[1]:
        st.subheader("Alterar Senha")
        
        with st.form("alterar_senha"):
            nova_senha = st.text_input("Nova Senha*", type="password")
            confirmar_nova_senha = st.text_input("Confirmar Nova Senha*", type="password")
            
            st.markdown("---")
            if st.form_submit_button("üîê Alterar Senha"):
                if nova_senha and confirmar_nova_senha:
                    if nova_senha == confirmar_nova_senha:
                        if len(nova_senha) >= 6:
                            if auth_manager.alterar_senha(id_usuario, nova_senha, st.session_state.user_data[0]):
                                st.success("‚úÖ Senha alterada com sucesso!")
                            else:
                                st.error("‚ùå Erro ao alterar senha!")
                        else:
                            st.error("‚ùå A senha deve ter pelo menos 6 caracteres!")
                    else:
                        st.error("‚ùå As senhas n√£o coincidem!")
                else:
                    st.error("‚ùå Preencha todos os campos!")
    
    with tabs[2]:
        st.subheader("Informa√ß√µes e Gerenciamento")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info(f"""
            **Informa√ß√µes do Usu√°rio:**
            - **ID:** {id_usuario}
            - **Usu√°rio:** {usuario}
            - **Data de Cadastro:** {data_cadastro}
            - **√öltimo Login:** {ultimo_login or 'Nunca'}
            """)
        
        with col2:
            st.warning("**A√ß√µes Permanentes:**")
            
            # Desativar/Ativar usu√°rio
            if ativo:
                if st.button("üîí Desativar Usu√°rio", key="desativar_usuario"):
                    if auth_manager.atualizar_usuario(id_usuario, nome, email, 
                                                    nivel_acesso, False, 
                                                    st.session_state.user_data[0]):
                        st.success("‚úÖ Usu√°rio desativado!")
                        st.rerun()
            else:
                if st.button("üîì Ativar Usu√°rio", key="ativar_usuario"):
                    if auth_manager.atualizar_usuario(id_usuario, nome, email, 
                                                    nivel_acesso, True, 
                                                    st.session_state.user_data[0]):
                        st.success("‚úÖ Usu√°rio ativado!")
                        st.rerun()
            
            # Excluir usu√°rio (n√£o pode excluir a si mesmo)
            if id_usuario != st.session_state.user_data[0]:
                st.markdown("---")
                if st.button("üóëÔ∏è Excluir Usu√°rio", key="excluir_usuario_modal"):
                    st.session_state.confirmando_exclusao = True
                
                if st.session_state.get('confirmando_exclusao', False):
                    st.error("‚ö†Ô∏è **ATEN√á√ÉO:** Esta a√ß√£o n√£o pode ser desfeita!")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if st.button("‚ö†Ô∏è CONFIRMAR EXCLUS√ÉO", key="confirmar_exclusao_final"):
                            if auth_manager.deletar_usuario(id_usuario, st.session_state.user_data[0]):
                                st.success("‚úÖ Usu√°rio exclu√≠do com sucesso!")
                                st.session_state.editando_usuario = None
                                st.session_state.confirmando_exclusao = False
                                st.rerun()
                            else:
                                st.error("‚ùå Erro ao excluir usu√°rio!")
                    
                    with col2:
                        if st.button("‚ùå Cancelar", key="cancelar_exclusao"):
                            st.session_state.confirmando_exclusao = False
                            st.rerun()
            else:
                st.info("‚ÑπÔ∏è N√£o √© poss√≠vel excluir seu pr√≥prio usu√°rio")

# Interface principal do sistema
def main():
    # Verificar se o usu√°rio est√° autenticado
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        pagina_login()
        return
    
    # Header com informa√ß√µes do usu√°rio
    user_data = st.session_state.user_data
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        st.title("üìã Sistema de Protocolo de Documentos")
    
    with col2:
        st.markdown(f"**Usu√°rio:** {user_data[2]} ({user_data[3].title()})")
    
    with col3:
        if st.button("üö™ Sair"):
            logout()
    
    # Sidebar para navega√ß√£o
    st.sidebar.title("Navega√ß√£o")
    
    opcoes_menu = ["Dashboard", "Protocolos", "Solicitantes"]
    
    # Adicionar op√ß√µes de admin
    if verificar_permissao("admin"):
        opcoes_menu.extend(["Usu√°rios", "Logs do Sistema"])
    
    opcao = st.sidebar.selectbox("Escolha uma op√ß√£o:", opcoes_menu)
    
    # Roteamento das p√°ginas
    if opcao == "Dashboard":
        dashboard()
    elif opcao == "Protocolos":
        gerenciar_protocolos()
    elif opcao == "Solicitantes":
        gerenciar_solicitantes()
    elif opcao == "Usu√°rios" and verificar_permissao("admin"):
        gerenciar_usuarios()
    elif opcao == "Logs do Sistema" and verificar_permissao("admin"):
        pagina_logs()

if __name__ == "__main__":
    main()